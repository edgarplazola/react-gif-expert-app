{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAsB9C,OACI,0BAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAWd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SApBpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,qDACuCC,UAAUH,GADjD,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAYZM,GAZY,4CAAH,sDCDPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCHHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAERa,ECHU,SAACb,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WAEN1B,EAAQC,GAAU0B,MAAK,SAACC,GACpBH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAIlB,CAACtB,IAEGuB,EDfkBK,CAAa5B,GAA9BO,KAER,OACI,oCACI,wBAAIW,UAAU,qCAAqClB,GACnD,yBAAKkB,UAAU,+CAEPL,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eAAamB,IAAKnB,EAAIC,IAAQD,UEVzCoB,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,cAFhB,mBAEvBQ,EAFuB,KAEXT,EAFW,KAI9B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OAAK,kBAAC,EAAD,CAAS6B,IAAK7B,EAAUA,SAAUA,U,MCVlF+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.e0315541.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport propTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories((categories) => [inputValue, ...categories]);\r\n            setinputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    AddCategory.propTypes = {\r\n        setCategories: propTypes.func.isRequired,\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n","\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/stickers/search?q=${encodeURI(category)}&limit=10&api_key=jFfwP9pCbeX6gigCrSoRmT4LQpZvqGMJ`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem key={img.id} {...img} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category).then((imgs) => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        })\r\n\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category => (<GifGrid key={category} category={category} />))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// Crear un componente GifExpertApp\n"],"sourceRoot":""}